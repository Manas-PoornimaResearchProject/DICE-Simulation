[comment encoding = UTF-8/]
[module generateGspnNetFile('http:///ptnet.ecore','http://es.unizar.disco/pnconstants/1.0')]

[template public generateGspnNetFile(petriNet : PetriNet) post (trim())]
[file (petriNet.id.concat('.net'), false, 'Cp1252')]
[comment NETFILE ::= COMMENT NOOBJS MARKS PLACES RATES GROUPS TRANS LAYERS /]
[comm(petriNet)/]
[noObjs(petriNet)/]
[comment -- Marks section is not used. Commented to avoid extra blank lines 
marks(petriNet)
/]
[places(petriNet)/]
[groups(petriNet)/]
[trans(petriNet)/]
[comment -- Marks section is not used. Commented to avoid extra blank lines 
layers(petriNet)
/]
[/file]
[/template]

[template public comm(petriNet : PetriNet) post (trim())]
[comment COMMENT ::= "|0|\n" COMHEAD "|\n" /]
|0|
|
[/template]

[template public noObjs(petriNet : PetriNet) post (trim())]
[comment NOOBJS ::= "f" space NM space NP space NR space NT space NG space "0" space NL space "\n" /]
f 0 [countPlaces(petriNet)/] 0 [countTransitions(petriNet)/] [countPriorityGroups(petriNet)/] 0 0
[/template]

[template public marks(petriNet : PetriNet) post (trim())]
[comment MARKS ::= #(NM) { NAME space MVAL space coords LEVELS "\n" } /]
[/template]

[template public places(petriNet : PetriNet) post (trim())]
[comment PLACES ::= #(NP) {NAME space PMARK space coords space coords LEVELS COL "\n" } /]
[for (place : Place | allPlaces(petriNet))]
[placeLine(place)/]
[/for]
[/template]

[template public placeLine(place : Place) post (trim())] 
[registerPlace(place)/]
[comment NAME space PMARK space coords space coords LEVELS COL /]
[place.id/] [marking(place)/] [placeCoords(place)/] [labelCoords(place)/] [levels(place)/] [col(place)/]
[/template]

[template public marking(place : Place) post (trim())] 
[if (place.initialMarking.text.oclIsUndefined()._not())]
[place.initialMarking.text/]
[else]
0
[/if]
[/template]

[template public placeCoords(place : Place) post (trim())] 
[if (place.nodegraphics.position.oclIsUndefined()._not())]
[place.nodegraphics.position.x/] [place.nodegraphics.position.y/]
[else]
0.0 0.0
[/if]
[/template]

[template public labelCoords(node : Node) post (trim())]
[let offset : Real = 0.05]
[if (node.nodegraphics.position.oclIsUndefined()._not())]
[node.nodegraphics.position.x + offset/] [node.nodegraphics.position.y + offset/]
[else]
[offset/] [offset/]
[/if]
[/let] 
[/template]

[template public levels(node : Node) post (trim())]
[comment LEVELS ::= space "0" | space pint LEVELS /]
0
[/template]

[template public col(place : Place) post (trim())]
[comment COL ::= empty | coords string /]
[/template]

[template public groups(petriNet : PetriNet) post (trim())]
[comment GROUPS ::= #(NG){NAME space coords space PRI "\n" } /]
[comment previously it was written 'G1 0.0 0.0 1' /]
[for (trans : Transition | allTransitions(petriNet))]
[if priorityToAdd(trans)]
[addPriority(trans)/]G[getPriorityIdx(trans)/] 0.0 0.0 [getPriority(trans)/]
[/if]
[/for]

[/template]

[template public trans(petriNet : PetriNet) post (trim())]
[comment TRANS ::= #(NT){NAME space TRATE space TSERV space TKND space TINP space
                         TROT space coords space coords space coords LEVELS COL "\n"
                         LDCOEFFS TIARCS TOUT TOARCS TINH THARCS } /]
[for (trans : Transition | allTransitions(petriNet))]
[if isExponential(trans)]
[trans.id/] [tRate(trans)/] [tServ(trans)/] [tKind(trans)/] [tInp(trans)/] [tRot(trans)/] [transCoords(trans)/] [labelCoords(trans)/] [labelCoords(trans)/] [levels(trans)/]
[ldCoeffs(trans)/][if (trans.InArcs->isEmpty()._not()) ][tiArcs(trans)/]
[/if][tOut(trans)/]
[if (trans.OutArcs->isEmpty()._not()) ][toArcs(trans)/]
[/if][tInh(trans)/][thArcs(trans)/]
[/if]
[/for]
[for (trans : Transition | allTransitions(petriNet))]
[if isExponential(trans)._not()]
[trans.id/] [tRate(trans)/] [tServ(trans)/] [tKind(trans)/] [tInp(trans)/] [tRot(trans)/] [transCoords(trans)/] [labelCoords(trans)/] [labelCoords(trans)/] [levels(trans)/]
[ldCoeffs(trans)/][if (trans.InArcs->isEmpty()._not()) ][tiArcs(trans)/]
[/if][tOut(trans)/]
[if (trans.OutArcs->isEmpty()._not()) ][toArcs(trans)/]
[/if][tInh(trans)/][thArcs(trans)/]
[/if][/for]

[/template]

[template public tRate(trans : Transition) post (trim())]
[if (isExponential(trans))]
[getRate(trans)/]
[elseif (isImmediate(trans))]
[getProbability(trans)/]
[else]
1.0
[/if]
[/template]

[template public tServ(trans : Transition) post (trim())]
[if (isInfiniteServer(trans))]
0
[elseif (isOneServer(trans))]
1
[else]
1 [comment 1 (for immediate) by default TODO: Check if some times it is exponential with infinite sever but it is not marked /]
[/if]
[/template]

[template public tKind(trans : Transition) post (trim())]
[if (isExponential(trans))]
0
[elseif (isImmediate(trans))]
1
[else]
[getPriorityIdx(trans)/]
[/if]
[/template]

[template public tInp(trans : Transition) post (trim())]
[comment TINP ::= natural /* No. Input Arcs */ /]
[trans.InArcs->size()/]
[/template]

[template public tRot(trans : Transition) post (trim())]
[comment TROT ::= "0" | "1" | "2" | "3" /* rotation coefficient */ /]
1
[/template]

[template public transCoords(trans : Transition) post (trim())] 
[if (trans.nodegraphics.position.oclIsUndefined()._not())]
[trans.nodegraphics.position.x/] [trans.nodegraphics.position.y/]
[else]
0.0 0.0
[/if]
[/template]

[template public ldCoeffs(trans : Transition) post (trim())]
[comment LDCOEFFS ::= (#(LDPOP) - 1){ preal "\n" } /]
[/template]

[template public tiArcs(trans : Transition) post (trim())]
[comment TIARCS ::= #(TINP){ AMULT space APLACE space APOINTS LEVELS COL "\n" APLIST } /]
[for (arc : Arc | trans.InArcs)]
1 [getPlaceIndex(arc.source.oclAsType(Place))/] 0 0
[/for]
[/template]

[template public tOut(trans : Transition) post (trim())]
[comment TOUT ::= natural "\n" /* No. Output Arcs */ /]
[trans.OutArcs->size()/]
[/template]

[template public toArcs(trans : Transition) post (trim())]
[comment TOARCS ::= #(TOUT){AMULT space APLACE space APOINTS LEVELS COL "\n" APLIST } /]
[for (arc : Arc | trans.OutArcs)]
1 [getPlaceIndex(arc.target.oclAsType(Place))/] 0 0
[/for]
[/template]

[template public tInh(trans : Transition) post (trim())]
[comment TINH ::= natural "\n" /* No. Inhibitor Arcs */ /]
0
[/template]

[template public thArcs(trans : Transition) post (trim())]
[comment THARCS ::= #(TINH){AMULT space APLACE space APOINTS LEVELS COL "\n" APLIST } /]
[/template]



[template public layers(petriNet : PetriNet) post (trim())]
[comment LAYERS ::= { NAME "\n" } /* list of Layer names one per layer used in objects */ /]
[/template]

[query public allPlaces(petriNet : PetriNet) : Collection(Place) = 
	petriNet.pages.objects->flatten()->selectByKind(Place) 
/]
[query public allTransitions(petriNet : PetriNet) : Collection(Transition) =
	petriNet.pages.objects->flatten()->selectByKind(Transition)
/]
[query public countPlaces(petriNet : PetriNet) : Integer = 
	allPlaces(petriNet)->size() 
/]
[query public countTransitions(petriNet : PetriNet) : Integer = 
	allTransitions(petriNet)->size()
/]

[query public countPriorityGroups(petriNet : PetriNet) : Integer = 
	--Count the number of different priorities in the net
	invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','countGroups(fr.lip6.move.pnml.ptnet.PetriNet)', Sequence{petriNet})
/]

[query public  priorityToAdd(trans: Transition) : Boolean =	
	-- Check whetehr the priority of the transition has not been treated as group yet. 
invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','priorityNotAdded(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public addPriority(trans : Transition) : OclVoid = 
	invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','addPriority(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public getPriorityIdx(trans : Transition) : Integer = 
	invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','getPriorityIndex(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]


[query public registerPlace(place : Place) : OclVoid = 
	-- Place index is based on the order they are processed, cannot be tracked via regular templates
	invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','registerPlace(org.eclipse.emf.ecore.EObject)', Sequence{place})
/]

[query public getPlaceIndex(place : Place) : Integer = 
 -- Place index is based on the order they are processed, cannot be tracked via regular templates
 invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','getPlaceIndex(org.eclipse.emf.ecore.EObject)', Sequence{place})
/]

[query public getRate(trans : Transition) : Real = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getTransitionRate(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public getProbability(trans : Transition) : Real = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getTransitionProbability(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public getPriority(trans : Transition) : Integer = 
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getTransitionPriority(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isExponential(trans : Transition) : Boolean =
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isExponential(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isImmediate(trans : Transition) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isImmediate(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isOneServer(trans : Transition) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isOneServer(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isInfiniteServer(trans : Transition) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isInfiniteServer(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

