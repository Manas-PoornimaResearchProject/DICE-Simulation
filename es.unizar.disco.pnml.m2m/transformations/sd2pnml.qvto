import es.unizar.disco.pnml.utils.PnmlDiceUtils;
import uml2pnml;
import helpers;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype PNML uses 'http:///ptnet.ecore';
modeltype CONF uses 'http://es.unizar.disco/pnconfig/1.0';
modeltype CONST uses 'http://es.unizar.disco/pnconstants/1.0';
	

transformation sd2pnml(in sd : UML, in config : CONF, out res : PNML) 
extends uml2pnml();


main()
{
	-- TODO: 
	--   Ignore nested ExecutionSpecifications
	--   Ignore messages to-from the same lifeline
	--   Implement CombinedFragments
	--   Transform only elements hanging from the selected GaScenario in config model
	new uml2pnml(sd, config, res)->transform();
	sd.objectsOfKind(UML::InteractionFragment)->map interactionFragment2subNet();
	sd.objectsOfKind(UML::Message)->map message2subNet();
	sd.objectsOfKind(UML::ExecutionSpecification)->map executionSpecification2lockSubNet();
	sd.objectsOfKind(UML::Lifeline)->map lifeline2subNet();
}

mapping UML::Lifeline::lifeline2subNet()
{
	var prePlace := self.map namedElement2place(self.getLastInteractionFragment().getLifelineOrderedIdentifier());
	var postPlace := self.map namedElement2place(self.safeId());
	var trans := self.map namedElement2transition('respS');
	
	self.map namedElement2arc(prePlace, trans);
	self.map namedElement2arc(trans, postPlace);
} 

mapping UML::InteractionFragment::interactionFragment2subNet()
disjuncts 
UML::MessageOccurrenceSpecification::messageSendOccurrenceSpecification2subNet,
UML::MessageOccurrenceSpecification::messageReceiveOccurrenceSpecification2subNet,
UML::ExecutionOccurrenceSpecification::executionStartOccurrenceSpecification2subNet, 
UML::ExecutionOccurrenceSpecification::executionFinishOccurrenceSpecification2subNet, 
UML::ExecutionSpecification::executionSpecification2subNet;


mapping UML::MessageOccurrenceSpecification::messageSendOccurrenceSpecification2subNet()
when {
	self.message.sendEvent = self
}
{
	var prePlace := self.map namedElement2place(self.getPrePlaceId());
	var postPlace := self.map namedElement2place(self.getPostPlaceId());
	var msgPlace := self.map namedElement2place(self.message.safeId().toMboxSendId());
	
	var trans := self.map namedElement2transition(self.message.safeId().toSendId());
	
	self.map namedElement2arc(prePlace, trans);
	self.map namedElement2arc(trans, postPlace);
	self.map namedElement2arc(trans, msgPlace);
}

mapping UML::MessageOccurrenceSpecification::messageReceiveOccurrenceSpecification2subNet()
when {
	self.message.receiveEvent = self
}
{
	var prePlace := self.map namedElement2place(self.getPrePlaceId());
	var postPlace := self.map namedElement2place(self.getPostPlaceId());
	var msgPlace := self.map namedElement2place(self.message.safeId().toMboxReceiveId());
	
	var trans := self.map namedElement2transition(self.message.safeId().toReceiveId());
	
	self.map namedElement2arc(prePlace, trans);
	self.map namedElement2arc(trans, postPlace);
	self.map namedElement2arc(msgPlace, trans);
}


mapping UML::Message::message2subNet()
when {
	self.sendEvent != null and self.receiveEvent != null
}
{
	var prePlace := self.map namedElement2place(self.safeId().toMboxSendId());
	var postPlace := self.map namedElement2place(self.safeId().toMboxReceiveId());
	
	var trans := self.map namedElement2transition(self.safeId());
	
	self.map namedElement2arc(prePlace, trans);
	self.map namedElement2arc(trans, postPlace);
}

mapping UML::ExecutionOccurrenceSpecification::executionStartOccurrenceSpecification2subNet()
when {
	self.execution.start = self
}
{
	var prePlace := self.map namedElement2place(self.getPrePlaceId());
	var postPlace := self.map namedElement2place(self.getPostPlaceId());
	
	var trans := self.map namedElement2transition(self.execution.safeId().toStartId());
	
	self.map namedElement2arc(prePlace, trans);
	self.map namedElement2arc(trans, postPlace);
}

mapping UML::ExecutionOccurrenceSpecification::executionFinishOccurrenceSpecification2subNet()
when {
	self.execution.finish = self
}
{
	var prePlace := self.map namedElement2place(self.getPrePlaceId());
	var postPlace := self.map namedElement2place(self.getPostPlaceId());
	
	var trans := self.map namedElement2transition(self.execution.safeId().toFinishId());
	
	self.map namedElement2arc(prePlace, trans);
	self.map namedElement2arc(trans, postPlace);
}

mapping UML::ExecutionSpecification::executionSpecification2subNet()
{
	var prePlace := self.map namedElement2place(self.getPrePlaceId());
	var postPlace := self.map namedElement2place(self.getPostPlaceId());
	
	var trans := self.map namedElement2transition(self.safeId());
	
	self.map namedElement2arc(prePlace, trans);
	self.map namedElement2arc(trans, postPlace);
}

mapping UML::ExecutionSpecification::executionSpecification2lockSubNet()
{
	var idlePlace := self.map namedElement2place(self.getLifeline().represents.type.owner.oclAsType(UML::NamedElement).safeId().toIdleId());
	var busyPlace := self.map namedElement2place(self.getLifeline().represents.type.owner.oclAsType(UML::NamedElement).safeId().toBusyId());

	var acquireTrans := self.map namedElement2transition(self.safeId().toStartId());
	var releaseTrans := self.map namedElement2transition(self.safeId().toFinishId());
	
	self.map namedElement2arc(idlePlace, acquireTrans);
	self.map namedElement2arc(acquireTrans, busyPlace);
	self.map namedElement2arc(busyPlace, releaseTrans);
	self.map namedElement2arc(releaseTrans, idlePlace);
}

helper UML::InteractionFragment::getLifeline() : UML::Lifeline
{
	-- As declared in the standard, the 'covered' association end for 
	-- 'OccurrenceSpecification'' is redefined, and the multiplicity is [1..1]
	return self.covered->asSequence()->first();
}

helper UML::InteractionFragment::getPrePlaceId() : String {
	if (self.getPrevInteractionFragmentInLifeline() != null) {
		return self.getPrevInteractionFragmentInLifeline().getLifelineOrderedIdentifier();
	};
	return self.getLifeline().safeId();
}

helper UML::InteractionFragment::getPostPlaceId() : String {
	return self.getLifelineOrderedIdentifier();
}


helper UML::InteractionFragment::getLifelineOrderedIdentifier() : String
{
	var lifeline := self.getLifeline();
	var interaction := self.enclosingInteraction;
	var lifelineFragments = interaction.fragment->select(fragment : UML::InteractionFragment | fragment.covered->includes(lifeline));
	var identifier := lifeline.safeId() + "_event_" + lifelineFragments->indexOf(self).toString();
	return identifier;
}

helper UML::InteractionFragment::getNextInteractionFragmentInLifeline() : UML::InteractionFragment
{
	var lifeline := self.getLifeline();
	var interaction := self.enclosingInteraction;
	var lifelineFragments = interaction.fragment->select(fragment : UML::InteractionFragment | fragment.covered->includes(lifeline));
	var thisIndex := lifelineFragments->indexOf(self);
	return lifelineFragments->at(thisIndex + 1);
}

helper UML::InteractionFragment::getPrevInteractionFragmentInLifeline() : UML::InteractionFragment
{
	var lifeline := self.getLifeline();
	var interaction := self.enclosingInteraction;
	var lifelineFragments = interaction.fragment->select(fragment : UML::InteractionFragment | fragment.covered->includes(lifeline));
	var thisIndex := lifelineFragments->indexOf(self);
	return lifelineFragments->at(thisIndex - 1);
}

helper UML::Lifeline::getLastInteractionFragment() : UML::InteractionFragment
{
	return self.interaction.fragment->select(fragment : UML::InteractionFragment | fragment.covered->includes(self))->last();
}

helper String::toIdleId() : String {
	return 'idle_'.concat(self);
}

helper String::toBusyId() : String {
	return 'busy_'.concat(self);
}

helper String::toStartId() : String {
	return 'start_'.concat(self);
}

helper String::toFinishId() : String {
	return 'finish_'.concat(self);
}

helper String::toSendId() : String {
	return 'send_'.concat(self);
}

helper String::toReceiveId() : String {
	return 'recv_'.concat(self);
}

helper String::toMboxSendId() : String {
	return 'mbox_send_'.concat(self);
}

helper String::toMboxReceiveId() : String {
	return 'mbox_recv_'.concat(self);
}
